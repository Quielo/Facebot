# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Facebot.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pyautogui
from selenium import webdriver
from time import sleep
import re
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ex
import platform


class Ui_Facebot(object):
    # Covers the program itself, aka the visual software
    def setupUi(self, Facebot):
        global key
        Facebot.setObjectName("Facebot")
        Facebot.resize(511, 430)
        Facebot.setWindowTitle("Facebot")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("facebook.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Facebot.setWindowIcon(icon)

        # Checkers for antideft
        sysData = str(platform.uname())
        #print(sysData)

        loadchecker = open('sys.dat', 'a+')
        loadchecker.write(sysData+"\n")
        loadchecker.close()
        keycheck = open('sys.dat', 'r+')
        key = keycheck.readline()
        #print(key)
        keycheck.close()

        v1 = key.strip()
        v2 = sysData.strip()

        # running check
        if v1 != v2:
            sys.exit(app.exec_())
        else:
            pass

        global imgon
        imgon = False

        # Code without starting (UI)
        def gpolish():
            # Guarda una direccion nueva a la lista de gpos
            addgponame = open('grupos.dat', 'a+')
            lst = self.txtgpo.text()
            addgponame.write(lst + "\n")
            addgponame.close()
            self.txtgpo.clear()

        def imgup():
            # creates a doc for the saving of the image file path
            imglst = open('imagenes.dat', 'a+')
            # this part erases the contents of the doc
            imglst.truncate(0)
            imgfile = str(QFileDialog.getOpenFileName(filter='Images (*.jpg *.png)')[0]).replace("/", "\\")
            imglst.write(imgfile + '\n')
            imglst.close()
            self.labelimg.show()
            global imgon
            imgon = True

        # Covers the inner workings of the program
        def comenzar():
            # Chrome options Selenium
            prefs = {"profile.default_content_setting_values.notifications": 2}
            options = webdriver.ChromeOptions()
            options.add_experimental_option("prefs", prefs)

            # Selects driver
            try:
                driver = webdriver.Chrome("chromedriver_87.exe", options=options)
            except:
                try:
                    driver = webdriver.Chrome("chromedriver_86.exe", options=options)
                except:
                    try:
                        driver = webdriver.Chrome("chromedriver_85.exe", options=options)
                    except:
                        print("Error <<No se encontro Driver>>")

            # Opens Chrome driver
            driver.maximize_window()
            driver.get('https://facebook.com')

            # Guarda txt a un formato texto
            txtdata = self.txttexto.toPlainText()
            txtsave = open('texto.dat', 'a+')
            txtsave.truncate(0)
            # el codigo superior borra lo escrito en el archivo .dat
            txtsave.write(txtdata)
            txtsave.close()
            # Termina este bloque de codigo

            usr = self.txtusr.text()
            psw = self.txtpass.text()
            titlepost = self.txttitle.text()
            pricepost = self.txtprice.text()


            # Wait until...
            try:
                WebDriverWait(driver, 15).until(
                    ex.presence_of_element_located((By.XPATH, '//input[@name=\"email\"]')))
            except:
                driver.quit()
                print("Error --Fuera de tiempo")

            driver.find_element_by_xpath('//input[@name=\"email\"]') \
                .send_keys(usr)
            driver.find_element_by_xpath('//input[@name=\"pass\"]') \
                .send_keys(psw)
            try:
                driver.find_element_by_id("loginbutton") \
                    .click()
            except:
                driver.find_element_by_xpath('//button[@name=\"login\"]') \
                    .click()

            # Inician las funciones

            def rulesbuttontap():
                try:
                    botonderecuadro = driver.find_element_by_xpath(
                        '//div[contains (@aria-label, "Got it!") and contains (@role, "button")]')
                    botonderecuadro.click()
                except:
                    try:
                        botonderecuadro = driver.find_element_by_xpath(
                            '//div[contains (@aria-label, "Got it!") and contains (@role, "button")]')
                        botonderecuadro.click()
                    except:
                        pass

            def extrastep():
                try:
                    sleep(2)
                    try:
                        # codigo de busqueda boton
                        exbuttons = driver.find_elements_by_xpath('//span')
                        for exbutton in exbuttons:
                            ing1 = bool(re.match("Create a single listing for one or more items to sell", exbutton.text))
                            esp1 = bool(re.match("Crea una sola publicaci√≥n para vender", exbutton.text))
                            if (ing1 == True) or (esp1 == True):
                                exbutton.click()
                                sleep(2)
                    except:
                        pass
                except:
                    pass

            def textposting():
                speech = open('texto.dat', 'r+')
                line = speech.read()
                pyautogui.write(line)
                speech.close()

            def publish():
                try:
                    buttons = driver.find_elements_by_xpath('//div[@role="button"]')
                    for button in buttons:
                        if (button.text == "Publicar") or (button.text == "Post"):
                            button.click()
                except:
                    xs = driver.find_elements_by_xpath("//button")
                    for x in xs:
                        if (x.text == "Publicar") or (x.text == "Post"):
                            x.click()

            def imgpost():
                # Inner function for path writting
                def imgpath():
                    sleep(3)
                    imgdir = open('imagenes.dat', 'r+')
                    for imgfile in imgdir:
                        pyautogui.write(imgfile)
                        sleep(2)
                        pyautogui.press('Enter')
                    imgdir.close()
                    sleep(2)
                if imgon == True:
                    try:
                        img = driver.find_element_by_xpath(
                            '//div[contains(@role, "button") and contains (@aria-label, "Add Photos")]')
                        img.click()
                        sleep(2)
                        imgpath()
                    except:
                        try:
                            img = driver.find_element_by_xpath(
                                '//div[contains(@role, "button") and contains (@aria-label, "Agregar fotos")]')
                            img.click()
                            sleep(2)
                            imgpath()
                        except:
                            try:
                                img = driver.find_element_by_xpath(
                                    '//div[contains(@role, "button") and contains (@aria-label, "Photo/Video")]')
                                img.click()
                                sleep(2)
                                imgpath()
                            except:
                                try:
                                    img = driver.find_element_by_xpath(
                                        '//div[contains(@role, "button") and contains (@aria-label, "Foto/video")]')
                                    img.click()
                                    sleep(2)
                                    imgpath()
                                except:
                                    print("Error -- No se pudo postear imagen")
                                    pass
                else:
                    pass

            def gpowaitload():
                try:
                    WebDriverWait(driver, 10).until(
                        ex.presence_of_element_located(
                            (By.XPATH, '//div[contains (@data-pagelet, "GroupFeed")]')))
                except:
                    pass

            # Waiting call
            try:
                WebDriverWait(driver, 15).until(
                    ex.presence_of_element_located(
                        (By.XPATH, '//a[contains (@role, "link") and contains (@aria-label, "Facebook")]')))
            except:
                driver.quit()
            # Redirige a la lista de grupos
            gposlst = open('grupos.dat', 'r+')
            for group in gposlst:
                driver.get(group)
                gpowaitload()
                # busca el boton de posteo
                try:
                    pst = driver.find_element_by_xpath("//*[@name='xhpc_message_text']")
                    pst.click()
                    extrastep()
                    sleep(2)
                    textposting()
                    imgpost()
                except:
                    try:
                        pst = driver.find_element_by_xpath(
                            '//div[contains (@role, "button") and contains (@aria-label, "Sell Something")]')
                        pst.click()
                        extrastep()
                        sleep(2)
                        imgpost()
                        sleep(3)
                        # Title
                        title = driver.find_element_by_xpath('//label[contains(@aria-label, "Title")]')
                        title.click()
                        sleep(2)
                        title.send_keys(titlepost)
                        sleep(2)
                        # Price
                        price = driver.find_element_by_xpath('//label[contains(@aria-label, "Price")]')
                        price.click()
                        sleep(2)
                        price.send_keys(pricepost)
                        sleep(2)
                        # Description
                        des = driver.find_element_by_xpath('//label[contains(@aria-label, "Description")]')
                        des.click()
                        sleep(2)

                        textposting()

                        sleep(2)
                        # Next
                        ext = driver.find_element_by_xpath(
                            '//div[contains(@role, "button") and contains (@aria-label, "Next")]')
                        ext.click()
                        sleep(2)
                    except:
                        try:
                            pst = driver.find_element_by_xpath(
                                '//div[contains (@role, "button") and contains (@aria-label, "Vender algo")]')
                            pst.click()
                            extrastep()
                            sleep(2)
                            imgpost()
                            sleep(2)
                            # Title
                            title = driver.find_element_by_xpath('//label[contains(@aria-label, "T√≠tulo")]')
                            title.click()
                            sleep(2)
                            title.send_keys(titlepost)
                            sleep(2)
                            # Price
                            price = driver.find_element_by_xpath('//label[contains(@aria-label, "Precio")]')
                            price.click()
                            sleep(2)
                            price.send_keys(pricepost)
                            sleep(2)
                            # Description
                            des = driver.find_element_by_xpath('//label[contains(@aria-label, "Descripci√≥n")]')
                            des.click()
                            sleep(2)
                            textposting()
                            sleep(2)
                            # Next
                            ext = driver.find_element_by_xpath(
                                '//div[contains(@role, "button") and contains (@aria-label, "Siguiente")]')
                            ext.click()
                            sleep(2)
                        except:
                            try:
                                # codigo de busqueda boton
                                botones = driver.find_elements_by_xpath('//div[contains(@role, "button")]')
                                for boton in botones:
                                    ing1 = bool(re.match("What's on your mind", boton.text))
                                    esp1 = bool(re.match("¬øQu√© est√°s pensando", boton.text))
                                    if (ing1 == True) or (esp1 == True):
                                        boton.click()
                                        extrastep()
                                        sleep(2)
                                        textposting()
                                        sleep(1)
                                        imgpost()
                            except:
                                print("Error -- No se encontro boton de publicacion")
               
                    # Boton de publicar
                    try:
                        post = driver.find_element_by_xpath(
                            '//div[contains(@role, "button") and contains (@aria-label, "Post")]')
                        post.click()
                    except:
                        try:
                            post = driver.find_element_by_xpath(
                                '//div[contains(@role, "button") and contains (@aria-label, "Publicar")]')
                            post.click()
                        except:
                            publish()
                    finally:
                        sleep(5)




        self.centralwidget = QtWidgets.QWidget(Facebot)
        self.centralwidget.setLocale(QtCore.QLocale(QtCore.QLocale.Spanish, QtCore.QLocale.Mexico))
        self.centralwidget.setObjectName("centralwidget")

        self.labelusr = QtWidgets.QLabel(self.centralwidget)
        self.labelusr.setGeometry(QtCore.QRect(10, 15, 151, 31))
        self.labelusr.setObjectName("labelusr")

        self.labelpass = QtWidgets.QLabel(self.centralwidget)
        self.labelpass.setGeometry(QtCore.QRect(10, 50, 151, 31))
        self.labelpass.setObjectName("labelpass")

        self.labeltitle = QtWidgets.QLabel(self.centralwidget)
        self.labeltitle.setGeometry(QtCore.QRect(10, 85, 151, 31))
        self.labeltitle.setObjectName("labeltitle")

        self.labelprice = QtWidgets.QLabel(self.centralwidget)
        self.labelprice.setGeometry(QtCore.QRect(10, 120, 151, 31))
        self.labelprice.setObjectName("labelprice")

        self.labeltexto = QtWidgets.QLabel(self.centralwidget)
        self.labeltexto.setGeometry(QtCore.QRect(10, 160, 151, 31))
        self.labeltexto.setObjectName("labeltexto")

        self.labelgpo = QtWidgets.QLabel(self.centralwidget)
        self.labelgpo.setGeometry(QtCore.QRect(10, 250, 211, 31))
        self.labelgpo.setObjectName("labelgpo")

        self.txtusr = QtWidgets.QLineEdit(self.centralwidget)
        self.txtusr.setGeometry(QtCore.QRect(200, 20, 290, 23))
        self.txtusr.setObjectName("txtusr")

        self.txtpass = QtWidgets.QLineEdit(self.centralwidget)
        self.txtpass.setGeometry(QtCore.QRect(200, 55, 290, 23))
        self.txtpass.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.txtpass.setObjectName("txtpass")

        self.txttitle = QtWidgets.QLineEdit(self.centralwidget)
        self.txttitle.setGeometry(QtCore.QRect(200, 90, 200, 23))
        self.txttitle.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.txttitle.setObjectName("txttitle")

        self.txtprice = QtWidgets.QLineEdit(self.centralwidget)
        self.txtprice.setGeometry(QtCore.QRect(200, 125, 100, 23))
        self.txtprice.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.txtprice.setObjectName("txtprice")

        self.txttexto = QtWidgets.QTextEdit(self.centralwidget)
        self.txttexto.setGeometry(QtCore.QRect(200, 160, 290, 81))
        self.txttexto.setObjectName("txttexto")

        self.txtgpo = QtWidgets.QLineEdit(self.centralwidget)
        self.txtgpo.setGeometry(QtCore.QRect(200, 255, 290, 23))
        self.txtgpo.setObjectName("txtgpo")

        self.buttonadd = QtWidgets.QPushButton(self.centralwidget)
        self.buttonadd.setGeometry(QtCore.QRect(400, 290, 91, 31))
        self.buttonadd.setObjectName("buttonadd")
        self.buttonadd.clicked.connect(gpolish)

        self.buttonstart = QtWidgets.QPushButton(self.centralwidget)
        self.buttonstart.setGeometry(QtCore.QRect(370, 360, 111, 41))
        self.buttonstart.setObjectName("buttonstart")
        self.buttonstart.clicked.connect(comenzar)

        self.labelimg = QtWidgets.QLabel(self.centralwidget)
        self.labelimg.setGeometry(QtCore.QRect(30, 310, 111, 41))
        self.labelimg.setObjectName("labelimg")
        self.labelimg.hide()

        self.buttonimg = QtWidgets.QPushButton(self.centralwidget)
        self.buttonimg.setGeometry(QtCore.QRect(20, 360, 111, 41))
        self.buttonimg.setObjectName("buttonimg")
        self.buttonimg.clicked.connect(imgup)

        Facebot.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Facebot)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 511, 20))
        self.menubar.setObjectName("menubar")

        Facebot.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Facebot)
        self.statusbar.setObjectName("statusbar")
        Facebot.setStatusBar(self.statusbar)

        self.retranslateUi(Facebot)
        QtCore.QMetaObject.connectSlotsByName(Facebot)


    def retranslateUi(self, Facebot):
        _translate = QtCore.QCoreApplication.translate
        self.labelusr.setText(_translate("Facebot", "Usuario o correo:"))
        self.labelpass.setText(_translate("Facebot", "Contrase√±a:"))
        self.labeltitle.setText(_translate("Facebot", "T√≠tulo:"))
        self.labelprice.setText(_translate("Facebot", "Precio:"))
        self.labeltexto.setText(_translate("Facebot", "Texto:"))
        self.labelgpo.setText(_translate("Facebot", "Link de grupo:"))
        self.buttonadd.setText(_translate("Facebot", "Agregar"))
        self.buttonstart.setText(_translate("Facebot", "Comenzar"))
        self.labelimg.setText(_translate("Facebot", "**Imagen cargada"))
        self.buttonimg.setText(_translate("Facebot", "Cargar imagen"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Facebot = QtWidgets.QMainWindow()
    ui = Ui_Facebot()
    ui.setupUi(Facebot)
    Facebot.show()
    sys.exit(app.exec_())
